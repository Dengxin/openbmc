#!/usr/bin/python3 -B
#
# Usually I would do this:
#   !/usr/bin/env -S python3 -B
# But, the default python3 on devservers is a managed environment for which
# the system RPM for `python3-sh` doesn't get used.

import argparse
import os
import subprocess
from io import IOBase
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml
from sh import git  # type: ignore

header = """Priority Legend:

- P0 - Needed for power-on
- P1 - Needed for EVT entry
- P2 - EVT exit gating
- P3 - DVT exit gating
- P4 - PVT exit gating
- P5 - Optional
"""
RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
NORMAL = "\033[0m"

FeatureList = Dict[str, Dict[str, Dict[str, str]]]


def find_file(name: str, machine: argparse.Namespace) -> Optional[str]:
    # Check in the machine directory
    base_file_name = os.path.join(machine.file, name)
    if os.path.isfile(base_file_name):
        return base_file_name

    # Check in the common, third-party and features directories
    for t in machine.tags:
        common_file_name = os.path.join("common", t, name)
        if os.path.isfile(common_file_name):
            return common_file_name
        third_party_file_name = os.path.join("third-party", name)
        if os.path.isfile(third_party_file_name):
            return third_party_file_name
    return None


def merge_dict(result: Dict[Any, Any], insert: Dict[Any, Any]) -> None:
    for v in insert.keys():
        if (
            v in result
            and isinstance(result[v], dict)
            and isinstance(insert[v], dict)
        ):
            merge_dict(result[v], insert[v])
        else:
            result[v] = insert[v]


def hyphenate(string: str) -> str:
    return "".join([x if x.isalnum() else "-" for x in string.lower()])


def write_title(output: IOBase, machine: argparse.Namespace) -> None:
    print(f"# OpenBMC Feature Requirements for {machine.name}", file=output)
    print(file=output)

    print("Version: ", get_version(machine.name), file=output)
    print(file=output)

    print("Contact:\n", file=output)
    print("- OpenBMC Team <openbmc_compute@meta.com>", file=output)
    print(file=output)
    print(header, file=output)


def get_version(machine: str) -> str:
    tags: List[str] = git.tag(
        "--points-at", "HEAD", _tty_out=False
    ).splitlines()

    for t in tags:
        if machine.lower() in t:
            return t

    d: str = git.describe(
        "--dirty", "--always", "--match", f"{machine.lower()}-*"
    ).strip()
    if machine.lower() not in d:
        d = f"{machine.lower()}-{d}"
    return d


def read_feature_list(machine: argparse.Namespace) -> FeatureList:
    features: FeatureList = dict()

    for f in machine.feature_list:
        file_name = f.upper() + ".yaml"
        print(GREEN + f"Finding feature file: {file_name}\n" + NORMAL)
        file = find_file(file_name, machine)
        if not file:
            print(RED + f"Feature file {file_name} was not found!" + NORMAL)
            continue
        print(GREEN + f"Feature file {file_name} was found." + NORMAL)

        try:
            with open(file, "r") as feature_file:
                feature_list = yaml.safe_load(feature_file)
                merge_dict(features, feature_list)
        except Exception as e:
            print(
                RED
                + f"Invalid JSON data found in feature file {file}:\n{e}"
                + NORMAL
            )
            continue

    if "status" in machine:
        for category, feature_list in machine.status.items():
            for feature, status in feature_list.items():
                features[category][feature]["status"] = status

    return features


def parse_feature_list(machine: argparse.Namespace) -> FeatureList:
    file = find_file("FEATURES.md", machine)
    if not file:
        raise Exception("Unable to find FEATURES.md")

    features: FeatureList = dict()

    with open(file, "r") as feature_file:
        for line in feature_file.readlines():
            if line.startswith("####"):
                title = line[4:].strip()
                section = hyphenate(title)
                if title not in features:
                    features[title] = dict()

            elif line.startswith("- ["):
                line = line[3:].strip()
                status = "done" if line.startswith("x") else None
                line = line.split("] ")[1]
                priority_subtitle = line.split(" ")
                priority = priority_subtitle[0]
                subtitle = " ".join(priority_subtitle[1:]).split("**")[1]
                subsection = hyphenate(subtitle)

                features[title][subtitle] = {
                    "file": f"{subsection}.md",
                    "priority": priority,
                }
                if status:
                    features[title][subtitle]["status"] = status
            elif line.startswith("  "):
                if "short" not in features[title][subtitle]:
                    features[title][subtitle]["short"] = line
                else:
                    features[title][subtitle]["short"] = (
                        features[title][subtitle]["short"] + line
                    )

    return features


def render_features(output: IOBase, machine: argparse.Namespace) -> None:
    features = (
        read_feature_list(machine)
        if "feature_list" in machine
        else parse_feature_list(machine)
    )

    header = []
    content = []

    header.append("## Features\n\n")
    header.append("### Feature Overview\n\n")

    for title in features.keys():
        section = hyphenate(title)

        header.append(f"#### [{title}](#s-{section})\n\n")
        content.append(f"### {title} {{#s-{section}}}\n\n")

        section_file = find_file(f"features/{section}.md", machine)
        if section_file:
            with open(section_file, "r") as sf:
                content = content + sf.readlines() + ["\n"]
        else:
            print(
                YELLOW
                + f"Warning: did not find subsection {section}.md file"
                + NORMAL
            )

        for subtitle, subtitle_data in features[title].items():
            subsection = hyphenate(subtitle)

            subtitle_result = subtitle_data["priority"] + " "
            subtitle_anchor = f"(#s-{section}-{subsection})"

            if (
                "status" not in subtitle_data
                or "done" == subtitle_data["status"]
            ):
                subtitle_file = find_file(
                    f"features/{section}/{subtitle_data['file']}", machine
                )
                if subtitle_file:
                    subtitle_result = (
                        subtitle_result + f"**[{subtitle}]{subtitle_anchor}**"
                    )
                    content.append(
                        f"#### {subtitle} {{#s-{section}-{subsection}}}\n\n"
                    )

                    with open(subtitle_file, "r") as sf:
                        content = content + sf.readlines() + ["\n"]
                else:
                    subtitle_result = subtitle_result + f"**{subtitle}**"
                    print(
                        RED
                        + "Warning: did not find section"
                        f" {subtitle_data['file']} file"
                        + NORMAL
                    )

                subtitle_result = (
                    "- ["
                    + (" " if "status" not in subtitle_data else "x")
                    + "] "
                    + subtitle_result
                )
            elif "unsupported" == subtitle_data["status"]:
                subtitle_result = (
                    f"- ~~[ ] {subtitle_result}**{subtitle}**~~"
                    " **Unsupported**"
                )
            else:
                raise Exception(
                    f"Unknown status ({subtitle_data['status']}) for"
                    f" {title}:{subtitle}"
                )
            header.append(subtitle_result + "\n")
            if "short" in subtitle_data:
                header.append(subtitle_data["short"])
        header.append("\n")

    for h in header:
        output.write(h)
    output.write("\n")
    for c in content:
        output.write(c)


def write_section(
    section: str, output: IOBase, machine: argparse.Namespace
) -> None:
    contents = []
    print(GREEN + f"Writing section {section}\n" + NORMAL)

    if f"render_{section}" in globals():
        globals()[f"render_{section}"](output, machine)
    else:
        file_name = section.upper() + ".md"
        file = find_file(file_name, machine)
        if file:
            with open(file, "r") as section_file:
                contents = section_file.readlines()
            print(GREEN + "Feature file successfully loaded." + NORMAL)
        else:
            raise Exception(f"Unable to find {file_name}.")

    for c in contents:
        output.write(c)

    print(file=output)


def create_docx(filename: str) -> None:
    if filename is None:
        return
    if Path(filename).is_file() and Path(filename).suffix != "":
        outfilename = filename.replace(".md", ".docx")
    else:
        outfilename = filename + ".docx"
    cmd = ["pandoc", "-s", filename, "-o", outfilename]
    result = subprocess.run(cmd)
    if result.returncode == 0:
        print(
            GREEN
            + f"Output docx file {outfilename} successfully generated"
            + NORMAL
        )
    else:
        print(
            RED
            + "Error: Unable to generate docx file.  Please ensure pandoc is"
            " installed."
            + NORMAL
        )


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-m",
        "--machine",
        dest="machine",
        action="store",
        required=True,
        help="Path to machine spec",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output",
        action="store",
        required=True,
        help="Output file",
    )

    args = parser.parse_args()

    if not args.machine:
        raise Exception(f"Missing machine spec: {args.machine}")
    if not args.output:
        raise Exception("Missing output file")
    working_path = "./"
    cwd = os.getcwd().rsplit("/")
    if cwd != args.machine:
        working_path = os.path.join(working_path, args.machine)
    yaml_file_name = working_path + "/" + args.machine + ".yaml"
    with open(yaml_file_name, "r") as yaml_file:
        machine = argparse.Namespace(
            **yaml.safe_load(yaml_file), file=args.machine
        )

    with open(args.output, "w") as output:
        write_title(output, machine)

        for s in machine.sections:
            write_section(s, output, machine)

        print(file=output)
    create_docx(args.output)
    print(GREEN + "Feature file generation completed." + NORMAL)


if __name__ == "__main__":
    main()
