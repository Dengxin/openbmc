From ed2e22dce0f789513cc08b087ae0c18f1dcaefa7 Mon Sep 17 00:00:00 2001
From: peteryin <peter.yin@quantatw.com>
Date: Mon, 17 Jul 2023 16:48:06 +0800
Subject: [PATCH 1/2] lmsensors support iio device

---
 lib/access.c         |  2 +
 lib/data.c           |  6 +++
 lib/sensors.h        |  5 +++
 lib/sysfs.c          | 90 ++++++++++++++++++++++++++++++++++++++++++--
 prog/sensors/chips.c | 31 +++++++++++++++
 5 files changed, 130 insertions(+), 4 deletions(-)

diff --git a/lib/access.c b/lib/access.c
index 757ba7a..6f8ed22 100644
--- a/lib/access.c
+++ b/lib/access.c
@@ -369,6 +369,8 @@ const char *sensors_get_adapter_name(const sensors_bus_id *bus)
 		return "HID adapter";
 	case SENSORS_BUS_TYPE_AUXILIARY:
 		return "Auxiliary device";
+	case SENSORS_BUS_TYPE_IIO:
+		return "IIO device";
 	}
 
 	/* bus types with several instances */
diff --git a/lib/data.c b/lib/data.c
index c61cae2..50d1a68 100644
--- a/lib/data.c
+++ b/lib/data.c
@@ -123,6 +123,8 @@ int sensors_parse_chip_name(const char *name, sensors_chip_name *res)
 		res->bus.type = SENSORS_BUS_TYPE_ACPI;
 	else if (!strncmp(name, "hid", dash - name))
 		res->bus.type = SENSORS_BUS_TYPE_HID;
+	else if (!strncmp(name, "iio", dash - name))
+		res->bus.type = SENSORS_BUS_TYPE_IIO;
 	else
 		goto ERROR;
 	name = dash + 1;
@@ -196,6 +198,10 @@ int sensors_snprintf_chip_name(char *str, size_t size,
 	case SENSORS_BUS_TYPE_AUXILIARY:
 		return snprintf(str, size, "%s-auxiliary-%04x", chip->prefix,
 				chip->addr);
+	case SENSORS_BUS_TYPE_IIO:
+		return snprintf(str, size, "%s-iio:device-%d", chip->prefix,
+				chip->addr);
+
 	}
 
 	return -SENSORS_ERR_CHIP_NAME;
diff --git a/lib/sensors.h b/lib/sensors.h
index 3b1d297..ba19c85 100644
--- a/lib/sensors.h
+++ b/lib/sensors.h
@@ -45,6 +45,7 @@
 #define SENSORS_BUS_TYPE_ACPI		5
 #define SENSORS_BUS_TYPE_HID		6
 #define SENSORS_BUS_TYPE_AUXILIARY      7
+#define SENSORS_BUS_TYPE_IIO		8
 #define SENSORS_BUS_NR_ANY		(-1)
 #define SENSORS_BUS_NR_IGNORE		(-2)
 
@@ -143,6 +144,7 @@ typedef enum sensors_feature_type {
 	SENSORS_FEATURE_CURR		= 0x05,
 	SENSORS_FEATURE_HUMIDITY	= 0x06,
 	SENSORS_FEATURE_PWM		= 0x07,
+	SENSORS_FEATURE_IIO		= 0x08,
 	SENSORS_FEATURE_MAX_MAIN,
 	SENSORS_FEATURE_VID		= 0x10,
 	SENSORS_FEATURE_INTRUSION	= 0x11,
@@ -245,6 +247,9 @@ typedef enum sensors_subfeature_type {
 	SENSORS_SUBFEATURE_PWM_ENABLE = (SENSORS_FEATURE_PWM << 8) | 0x80,
 	SENSORS_SUBFEATURE_PWM_MODE,
 
+	SENSORS_SUBFEATURE_IIO_RAW = SENSORS_FEATURE_IIO << 8,
+	SENSORS_SUBFEATURE_IIO_DIFF = (SENSORS_FEATURE_IIO << 8) | 0x80,
+
 	SENSORS_SUBFEATURE_VID = SENSORS_FEATURE_VID << 8,
 
 	SENSORS_SUBFEATURE_INTRUSION_ALARM = SENSORS_FEATURE_INTRUSION << 8,
diff --git a/lib/sysfs.c b/lib/sysfs.c
index 46bdcfc..e59a064 100644
--- a/lib/sysfs.c
+++ b/lib/sysfs.c
@@ -36,10 +36,11 @@
 #include "access.h"
 #include "general.h"
 #include "sysfs.h"
+#include <stdio.h>
+#include <ctype.h>
 
 
 /****************************************************************************/
-
 #define ATTR_MAX	128
 #define SYSFS_MAGIC	0x62656572
 
@@ -150,6 +151,8 @@ int get_type_scaling(sensors_subfeature_type type)
 		return 1000;
 	case SENSORS_SUBFEATURE_FAN_INPUT:
 	case SENSORS_SUBFEATURE_PWM_IO:
+	case SENSORS_SUBFEATURE_IIO_RAW:
+	case SENSORS_SUBFEATURE_IIO_DIFF:
 		return 1;
 	case SENSORS_SUBFEATURE_POWER_AVERAGE:
 	case SENSORS_SUBFEATURE_ENERGY_INPUT:
@@ -193,7 +196,9 @@ char *get_feature_name(sensors_feature_type ftype, char *sfname)
 		name = strndup(sfname, 4);
 		if (!name)
 			sensors_fatal_error(__func__, "Out of memory");
-
+	case SENSORS_FEATURE_IIO:
+		/* Not all pwm subfeatures have a underscore in there name */
+		name = strndup(sfname, 32);
 	default:
 		name = strdup(sfname);
 		if (!name)
@@ -340,6 +345,13 @@ static const struct subfeature_type_match pwm_matches[] = {
 	{ NULL, 0 }
 };
 
+static const struct subfeature_type_match iio_matches[] = {
+	{ "raw", SENSORS_SUBFEATURE_IIO_RAW },
+        { "voltage", SENSORS_SUBFEATURE_IIO_DIFF },
+	{ NULL, 0 }
+};
+
+
 static struct feature_type_match matches[] = {
 	{ "temp%d%c", temp_matches },
 	{ "in%d%c", in_matches },
@@ -351,6 +363,7 @@ static struct feature_type_match matches[] = {
 	{ "intrusion%d%c", intrusion_matches },
 	{ "humidity%d%c", humidity_matches },
 	{ "pwm%d%c", pwm_matches },
+	{ "in_voltage%d%c", iio_matches },
 };
 
 /* Return the subfeature type and channel number based on the subfeature
@@ -373,6 +386,12 @@ sensors_subfeature_type sensors_subfeature_get_type(const char *name, int *nr)
 			if (matches[i].submatches == pwm_matches) {
 				return SENSORS_SUBFEATURE_PWM_IO;
 			}
+			if (matches[i].submatches == iio_matches) {
+				if (c == '-') {
+					*nr=*nr+128;
+				}
+				return SENSORS_SUBFEATURE_IIO_RAW;
+			}
 			break;
 		}
 	}
@@ -430,7 +449,6 @@ static int sensors_get_attr_mode(const char *device, const char *attr)
 	}
 	return mode;
 }
-
 static int sensors_read_dynamic_chip(sensors_chip_features *chip,
 				     const char *dev_path)
 {
@@ -470,7 +488,6 @@ static int sensors_read_dynamic_chip(sensors_chip_features *chip,
 			continue;
 
 		name = ent->d_name;
-
 		sftype = sensors_subfeature_get_type(name, &nr);
 		if (sftype == SENSORS_SUBFEATURE_UNKNOWN)
 			continue;
@@ -487,6 +504,8 @@ static int sensors_read_dynamic_chip(sensors_chip_features *chip,
 		case SENSORS_FEATURE_PWM:
 			nr--;
 			break;
+		case SENSORS_FEATURE_IIO:
+			break;
 		default:
 			break;
 		}
@@ -745,6 +764,10 @@ static int sensors_read_one_sysfs_chip(const char *dev_path,
 		entry.chip.bus.type = SENSORS_BUS_TYPE_AUXILIARY;
 		entry.chip.bus.nr = 0;
 		entry.chip.addr = 0;
+	} else if (subsys && !strcmp(subsys, "iio")) {
+		entry.chip.bus.type = SENSORS_BUS_TYPE_IIO;
+		entry.chip.bus.nr = 0;
+		sscanf(dev_name,"iio:device%d", &entry.chip.addr);
 	} else {
 		/* Ignore unknown device */
 		err = 0;
@@ -791,6 +814,59 @@ static int sensors_read_sysfs_chips_compat(void)
 	return 0;
 }
 
+//Check IIO is i2c device
+char* iio_device_id(const char* path) {
+	const char* i2cStr = "i2c";
+	char* delimiter = "/";
+	char* token;
+
+	if (strstr(path, i2cStr) == NULL) {
+		return NULL;
+	}
+
+	token = strtok(path, delimiter);
+	while (token != NULL) {
+		if (strlen(token) == 7 && token[2] == '-' &&
+			isdigit(token[0]) && isdigit(token[1]) &&
+			isdigit(token[4]) && isdigit(token[5]) && isdigit(token[6])) {
+			return token;
+	}
+		token = strtok(NULL, delimiter);
+	}
+	return NULL;
+}
+
+static int sensors_add_iio_device(const char *path, const char *busdev)
+{
+	char linkpath[NAME_MAX];
+	char device[NAME_MAX], *device_p=NULL;
+	int dev_len, err;
+
+	if (!strncmp(busdev, "iio", 3))
+		snprintf(linkpath, NAME_MAX, "%s", path);
+
+	dev_len = readlink(linkpath, device, NAME_MAX - 1);
+	if (dev_len < 0) {
+		/* No device link? Treat as virtual */
+		err = sensors_read_one_sysfs_chip(NULL, NULL, path);
+	} else {
+		device[dev_len] = '\0';
+		device_p = iio_device_id(device);
+		/* The attributes we want might be those of the hwmon class
+		   device, or those of the device itself. */
+		if(device_p != NULL) {
+			err = sensors_read_one_sysfs_chip(device, device_p, linkpath);
+		}else {
+			device_p = strrchr(device, '/') + 1;
+			err = sensors_read_one_sysfs_chip(linkpath, device_p, linkpath);
+		}
+	}
+	if (err < 0)
+		return err;
+	return 0;
+}
+
+
 static int sensors_add_hwmon_device(const char *path, const char *classdev)
 {
 	char linkpath[NAME_MAX];
@@ -830,6 +906,12 @@ int sensors_read_sysfs_chips(void)
 		return sensors_read_sysfs_chips_compat();
 	}
 
+	ret = sysfs_foreach_busdev("iio", sensors_add_iio_device);
+	if (ret && ret != ENOENT) {
+		printf("%s ret=%d\n", __func__, ret);
+		return -SENSORS_ERR_DIV_ZERO;
+	}
+
 	if (ret > 0)
 		ret = -SENSORS_ERR_KERNEL;
 	return ret;
diff --git a/prog/sensors/chips.c b/prog/sensors/chips.c
index f08351d..2a7edb1 100644
--- a/prog/sensors/chips.c
+++ b/prog/sensors/chips.c
@@ -689,6 +689,34 @@ static void print_chip_humidity(const sensors_chip_name *name,
 	free(label);
 }
 
+
+static void print_chip_iio(const sensors_chip_name *name,
+			   const sensors_feature *feature,
+			   int label_size)
+{
+	const sensors_subfeature *sfio;
+	char *label;
+	double val;
+
+	if (!(label = sensors_get_label(name, feature))) {
+		fprintf(stderr, "ERROR: Can't get label of feature %s!\n",
+			feature->name);
+		return;
+	}
+	print_label(label, label_size);
+	free(label);
+
+	sfio = sensors_get_subfeature(name, feature,
+				      SENSORS_SUBFEATURE_IIO_RAW);
+	if (sfio && !get_input_value(name, sfio, &val))
+		printf("    %.0f mV", val);
+	else
+		printf("    N/A");
+
+	printf("\n");
+}
+
+
 static void print_chip_pwm(const sensors_chip_name *name,
 			   const sensors_feature *feature,
 			   int label_size)
@@ -881,6 +909,9 @@ void print_chip(const sensors_chip_name *name)
 		case SENSORS_FEATURE_PWM:
 			print_chip_pwm(name, feature, label_size);
 			break;
+		case SENSORS_FEATURE_IIO:
+			print_chip_iio(name, feature, label_size);
+			break;
 		default:
 			continue;
 		}
-- 
2.25.1

